/*package com.bridgeit.todo.controller;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;

import com.bridgeit.tod.util.GoogleUtil;
import com.bridgeit.todo.Token.TokenGenerate;
import com.bridgeit.todo.model.ErrorMessage;
import com.bridgeit.todo.service.UserService;

public class GoogleLoginController {

	private Logger logger = (Logger) LoggerFactory.getLogger(GoogleLoginController.class);
	@Autowired
	 UserService userService;
	
	@Autowired
	ErrorMessage errorMessage;
	
	@RequestMapping(value="/googleLogin")
	public void googleLogin(HttpServletRequest request, HttpServletResponse response) {
		
		String googleUrl=GoogleUtil.generateGoogleUrl();
		logger.info("checking google url"+googleUrl);
		try {
			response.sendRedirect(googleUrl);
		} catch (IOException e) {
			logger.info("exception while generating google url");
			e.printStackTrace();
		}

	}
	@RequestMapping(value="/successGoogleLogin")
	public ResponseEntity<ErrorMessage> successGoogleLogin(HttpServletRequest request, HttpServletResponse response,HttpSession session) {
		
		String code = (String)request.getParameter("code");
		logger.info("code"+code);
		String accessToken = GoogleUtil.getAccessToken(code);
		logger.info("accessToken"+accessToken);
		
		String googleProfileInfo = GoogleUtil.getProfileData(accessToken);
		logger.info("google profile info"+googleProfileInfo);
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			String email = objectMapper.readTree(googleProfileInfo).get("email").asText();
			logger.info("email:-"+email);
			User userByEmail = userService.getUserByEmail(email);
			if(userByEmail==null) {
				User googleUser = new User();
				googleUser.setEmail(objectMapper.readTree(googleProfileInfo).get("email").asText());
				googleUser.setFirstName(objectMapper.readTree(googleProfileInfo).get("given_name").asText());
				googleUser.setLastName(objectMapper.readTree(googleProfileInfo).get("family_name").asText());
				googleUser.setValid(true);
				userService.register(googleUser);
				String myAccessToken = TokenGenerate.generateToken(userByEmail.getId());
				logger.info("token geneted by jwt"+myAccessToken);
				session.setAttribute("myAccessToken", myAccessToken);
	
			}
	
}
*/