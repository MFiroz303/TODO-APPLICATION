package com.bridgeit.todo.controller;

import java.io.IOException;
import java.util.Enumeration;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.bridgeit.todo.Token.TokenGenerate;
import com.bridgeit.todo.Token.VerifyJwt;
import com.bridgeit.todo.model.ErrorMessage;
import com.bridgeit.todo.model.User;
import com.bridgeit.todo.service.MailService;

import com.bridgeit.todo.service.UserService;
import com.bridgeit.todo.validation.Validator;

/**
 * This Controller called when any operations having related to User Accounts operation
 * 
 * @author MD FIROZ
 * 
 * */

@RestController
public class UserController {

	private Logger logger = LoggerFactory.getLogger(UserController.class);

	@Autowired
	UserService userService;

	/*@Autowired
	ProducerImpl mailservice;*/
	
	@Autowired
	MailService mailservice;

	@Autowired
	ErrorMessage errorMessage;

	@Autowired
	Validator validator;

	@Autowired
	TokenGenerate tokenGenerate;

	/**
	 * @param Uer(register new user account)
	 * 
	 * 
	 * @param Token(generating and verifying token )
	 * 
	 * @return ResponseMessage
	 * 
	 * @param User(check validUser)
	 * 
	 * Description (method used here add new notes )
	 * */
	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public ResponseEntity<ErrorMessage> saveUser(@RequestBody User user, HttpSession session,
			HttpServletRequest request) {

		String isValid = validator.validateUserRegistration(user);
		if (isValid.equals("true")) {

			int isValidate = userService.saveUser(user);
			if (isValidate != 0) {

				logger.info("cheaking information is valid or not");
				String accessToken = TokenGenerate.generate(user.getId());
				String url = request.getRequestURL().toString();
				
				url = url.substring(0, url.lastIndexOf("/")) + "/" + "verifyMail" + "/" + accessToken;
				mailservice.sendMail(user.getEmail(), "mdfirozahmad2222@gmail.com", "emailVerification", url);
				
				logger.info("sending the mail for registration verification");
				errorMessage.setResponseMessage("registered Successfully....");
				return ResponseEntity.ok(errorMessage);
			}
		} else {
			    errorMessage.setResponseMessage(isValid);
			    logger.error(isValid);
			    return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);
		}
		        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);
	}

	@RequestMapping(value = "/verifyMail/{accessToken:.+}", method = RequestMethod.GET)
	public ResponseEntity<ErrorMessage> verifyUser(@PathVariable("accessToken") String accessToken,
			HttpServletResponse response) throws IOException {

		User user = null;
		System.out.println(user);
		int id = VerifyJwt.verify(accessToken);
		logger.debug("verifying accessToken");
		System.out.println("");

		try {
			user = userService.getUserById(id);
			logger.debug("User verifing by id");

		} catch (Exception e) {
			logger.error("catching exception e");
			e.printStackTrace();
		}
		user.setActivated(true);
		logger.debug("accessToken Activated");
		try {
			userService.updateUser(user);
			logger.info("registration successful");
		} catch (Exception e) {
			System.out.println(e);
			e.printStackTrace();
		}
		errorMessage.setResponseMessage("user Email verified successfully ");
		return new ResponseEntity<ErrorMessage>(errorMessage, HttpStatus.OK);

	}

	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public ResponseEntity<ErrorMessage> userLogin(@RequestBody User user, HttpSession session) {

		User userLogin = userService.getUserByEmail(user.getEmail());
		logger.info("verifying User by Email");

		if (userLogin == null) {
			logger.info("user entering invalid information");
			errorMessage.setResponseMessage("user with this email not exist");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);
		}

		boolean match = BCrypt.checkpw(user.getPassword(), userLogin.getPassword());
		if (!match) {
			logger.warn("Wrong password");
			errorMessage.setResponseMessage("wrong password");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);
		}
		else if(userLogin.isActivated()){
		    session.setAttribute("user", userLogin);
		    String accessToken = TokenGenerate.generate(userLogin.getId());
		    logger.debug("user successfully login");
		    System.out.println("Token  "+accessToken);
		    errorMessage.setResponseMessage(accessToken);}
		    return ResponseEntity.ok(errorMessage);
		
		
	}

	@RequestMapping(value = "/forgotPassword", method = RequestMethod.POST)
	public ResponseEntity<ErrorMessage> forgaotPassword(@RequestBody User user, HttpServletRequest request,
			HttpSession session) {

		logger.info("sending the mail to update password.");
		User email = userService.getUserByEmail(user.getEmail());
		// User id = userService.getUserById(user.getId());

		if (email == null) {
			logger.info("user entered invalid email");
			errorMessage.setResponseMessage("Enter valid  email...");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);

		} else {
			String accessToken = TokenGenerate.generate(email.getId());
			String url = request.getRequestURL().toString();
			url = url.substring(0, url.lastIndexOf("/")) + "/" + "setPassword" + "/" + accessToken;
			
			System.out.println("token" + accessToken);
			mailservice.sendMail(user.getEmail(), "mdfirozahmad2222@gmail.com", "accessToken is :", url);
			
			errorMessage.setResponseMessage("success");
			return ResponseEntity.ok(errorMessage);
		}
	}
	@RequestMapping(value = "/setPassword/{Token:.+}", method = RequestMethod.PUT)
	public ResponseEntity<String> setPassword(@RequestBody User user1, HttpSession session,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		
		    String userToken = null;
		    @SuppressWarnings("rawtypes")
			Enumeration headerNames = request.getHeaderNames();
		    
		 while (headerNames.hasMoreElements()) {
			 String key = headerNames.nextElement().toString();
			 if (key.equals("Authorization")) {
			 userToken = request.getHeader(key);
			}
		}
		int id = VerifyJwt.verify(userToken);
		User user = userService.getUserById(id);
		System.out.println("User id is:  " + id);
		user1.setId(id);
		
		if (user == null) {
			logger.info("No user Found at this id");
			errorMessage.setResponseMessage("No user Found at this id");
			return ResponseEntity.status(HttpStatus.OK).body("user empty");
		}
			response.sendRedirect("http://localhost:8080/ToDo/#!/setPassword");
          
		if (userService.setPassword(user1)) {
			logger.info("check and set password for user");
			errorMessage.setResponseMessage("password updated");
			logger.debug("password updated successfully");
			return ResponseEntity.ok("password updated");
		}

		logger.info("password not updated");
		errorMessage.setResponseMessage("password not updated");
		//return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);
		return ResponseEntity.status(HttpStatus.OK).body("password not updated");
	}
	
	@RequestMapping(value = "/userProfile" ,method=RequestMethod.GET)
	public ResponseEntity<User> currentUser(@RequestHeader("Authorization") String Authorization, HttpServletRequest request) throws IOException {
		System.out.println("########################################"+Authorization);
		int userId = VerifyJwt.verify(Authorization);
		User user = userService.getUserById(userId);
		System.out.println("#########################################"+user);
		return ResponseEntity.ok(user);
	}
}