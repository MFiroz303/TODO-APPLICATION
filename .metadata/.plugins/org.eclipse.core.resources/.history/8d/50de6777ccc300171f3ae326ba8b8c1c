package com.bridgeit.todo.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.bridgeit.todo.Token.TokenGenerate;
import com.bridgeit.todo.Token.TokenVerify;
import com.bridgeit.todo.model.ErrorMessage;
import com.bridgeit.todo.model.User;
import com.bridgeit.todo.service.MailService;
import com.bridgeit.todo.service.UserService;
import com.bridgeit.todo.validation.Validator;

@RestController
public class UserController {

	@Autowired
	UserService userService;

	@Autowired
	MailService mailservice;

	@Autowired
	ErrorMessage errorMessage;

	@Autowired
	Validator validator;

	@Autowired
	TokenGenerate tokenGenerate;

	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public ResponseEntity<ErrorMessage> saveUser(@RequestBody User user, HttpSession session,
			HttpServletRequest request) {

		String url = request.getRequestURL().toString();
		url = url.substring(0, url.lastIndexOf("/"));

		String isValid = validator.validateUserRegistration(user);

		if (isValid.equals("true")) {
			userService.saveUser(user);

			String token = tokenGenerate.generate(user.getId());
			mailservice.sendMail(user.getEmail(), "mdfirozahmad2222@gmail.com", "emailVerification",
					url + "/" + "userVerify");

			System.out.println("Token for registration :" + token);
			errorMessage.setResponseMessage("registered Successfully....");
			return ResponseEntity.ok(errorMessage);

		} else {
			errorMessage.setResponseMessage(isValid);
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);
		}
	}
	@RequestMapping(value = "/verifyUser/{id}", method = RequestMethod.POST)
	public ResponseEntity<ErrorMessage> verify(@PathVariable("id") int id, HttpServletRequest request){
		
		boolean isVerify = userService.isActive(id);
			
			if(isVerify){
				
				errorMessage.setResponseMessage("user verified");
				return ResponseEntity.ok(errorMessage);		
		}
			
			else{
				
				errorMessage.setResponseMessage("user not active");
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);
				
			}
		     return ResponseEntity.ok(errorMessage);	
		
		
		
		
	}

	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public ResponseEntity<ErrorMessage> userLogin(@RequestBody User user, HttpSession session) {
		User userLogin = userService.userLogin(user.getEmail(), user.getPassword());

		if (userLogin == null) {
			errorMessage.setResponseMessage("insert valid information");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);
		}

		session.setAttribute("user", userLogin);
		errorMessage.setResponseMessage("Login Successfully....");
		return ResponseEntity.ok(errorMessage);
	}

	@RequestMapping(value = "/forgotPassword", method = RequestMethod.POST)
	public ResponseEntity<ErrorMessage> forgaotPassword(@RequestBody User user, HttpServletRequest request,
			HttpSession session) {

		String url = request.getRequestURL().toString();
		url = url.substring(0, url.lastIndexOf("/")) + "/" + "setPassword";

		User email = userService.getUserByEmail(user.getEmail());

		if (email == null) {
			errorMessage.setResponseMessage("Enter valid  email...");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);

		} else {
			String token = tokenGenerate.generate(user.getId());
			System.out.println("token" + token);
			// session.setAttribute("Token", token);
			mailservice.sendMail(user.getEmail(), "mdfirozahmad2222@gmail.com", "token is :", url);

			errorMessage.setResponseMessage("success");
			return ResponseEntity.ok(errorMessage);
		}
	}

	@RequestMapping(value = "/setPassword", method = RequestMethod.PUT)
	public ResponseEntity<ErrorMessage> setPassword(@RequestBody User user, HttpSession session) {
		System.out.println("inside set passwors");
		String email = user.getEmail();
		String password = user.getPassword();

		user = userService.getUserByEmail(user.getEmail());

		if (user == null) {
			errorMessage.setResponseMessage("No user Found at this email");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);
		}

		else {
			user.setPassword(password);

			if (userService.setPassword(user)) {
				errorMessage.setResponseMessage("password updated");
				System.out.println("pasword.."+user.getPassword());
				return ResponseEntity.ok(errorMessage);
			}

			errorMessage.setResponseMessage("password not updated");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);
			}
		}
	
	/*
	 * @RequestMapping(value = "/setPassword", method = RequestMethod.PUT)
	 * public ResponseEntity<ErrorMessage> setPassword(@RequestBody User
	 * user,HttpSession session) { System.out.println("inside set passwors");
	 * String email = user.getEmail(); String password = user.getPassword();
	 * 
	 * System.out.println("before generating token");
	 * //System.out.println(session.getAttribute("Token"));; int userId =
	 * TokenVerify.verify((String) session.getAttribute("Token"));
	 * System.out.println("uerid"+userId);
	 * System.out.println("after generating token");
	 * 
	 * if (userId == 0) { errorMessage.setResponseMessage("Invalid token");
	 * return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);
	 * 
	 * } user = userService.getUserByEmail(user.getEmail()); if (user == null) {
	 * System.out.println("inside user by email");
	 * errorMessage.setResponseMessage("User not found :"); return
	 * ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage); }
	 * 
	 * if (userId != user.getId()) {
	 * errorMessage.setResponseMessage("Invalid token"); return
	 * ResponseEntity.ok(errorMessage); }
	 * 
	 * user.setPassword(password); if (userService.setPassword(user)) {
	 * errorMessage.setResponseMessage("Success :"); return
	 * ResponseEntity.ok(errorMessage);
	 * 
	 * } else { errorMessage.setResponseMessage("password error:"); return
	 * ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage); } }
	 */

	@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
	@ExceptionHandler(value = Exception.class)
	public String exceptionHandler(Exception e) {
		return "Exception";

	}
}
