package com.bridgeit.todo.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.bridgeit.todo.Token.TokenGenerate;
import com.bridgeit.todo.model.ErrorMessage;
import com.bridgeit.todo.model.User;
import com.bridgeit.todo.service.MailService;
import com.bridgeit.todo.service.UserService;
import com.bridgeit.todo.validation.Validator;
import com.sun.mail.imap.protocol.Status;

@RestController
public class UserController {

	@Autowired
	UserService userService;

	@Autowired
	MailService mailservice;

	@Autowired
	ErrorMessage errorMessage;

	@Autowired
	Validator validator;

	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public ResponseEntity<ErrorMessage> saveUser(@RequestBody User user, HttpSession session, String requset) {
		System.out.println(user);
		String isValid = validator.validateUserRegistration(user);

		if (isValid.equals("true")) {

			userService.saveUser(user);
			/*
			 * TokenGenerate tokenGenerate = new TokenGenerate(); String token =
			 * tokenGenerate.generate(user.getId());
			 * 
			 * mailservice.sendMail(
			 * user.getEmail(),"mdfirozahmad2222@gmail.com","Hello", "Link: "
			 * +token); System.out.println("Token"+token);
			 */
			errorMessage.setResponseMessage("registered Successfully....");
			return ResponseEntity.ok(errorMessage);

		} else {
			errorMessage.setResponseMessage(isValid);
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);
		}
	}

	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public ResponseEntity<ErrorMessage> userLogin(@RequestBody User user, HttpSession session) {
		User userLogin = userService.userLogin(user.getEmail(), user.getPassword());

		if (userLogin == null) {
			errorMessage.setResponseMessage("insert valid information");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);
		}

		session.setAttribute("user", userLogin);
		errorMessage.setResponseMessage("Login Successfully....");
		return ResponseEntity.ok(errorMessage);
	}

	@RequestMapping(value = "/forgotPassword", method = RequestMethod.POST)
	public ResponseEntity<ErrorMessage> forgaotPassword(@RequestBody User user, HttpServletRequest request,
			HttpSession session) {

		String url = request.getRequestURL().toString();
		url = url.substring(0, url.lastIndexOf("/")) + "/resetPassword";
		
		User email = userService.getUserByEmail(user.getEmail());

		if (email == null) {
			errorMessage.setResponseMessage("Enter valid  email...");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);

		}
		try {

			TokenGenerate tokenGenerate = new TokenGenerate();
			String token = tokenGenerate.generate(user.getId());
			session.setAttribute("Token", token);

			mailservice.sendMail("asfiroz007@gmail.com", user.getEmail(), "token is :", url + "token=" + token);
		} catch (Exception e) {
			e.printStackTrace();
			errorMessage.setResponseMessage("");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);
		}

		errorMessage.setResponseMessage("success");
		return ResponseEntity.ok(errorMessage);
	}

	@RequestMapping(value = "/resetPassword", method = RequestMethod.PUT)
	public ResponseEntity<ErrorMessage> resetPassword(@RequestBody User user,HttpSession session) {
		String email = user.getEmail();
		String password = user.getPassword();
		int userId = VerifiedJWT.verify((String) session.getAttribute("Token"));
		

		if (email == null) {
			errorMessage.setResponseMessage("Enter valid email...");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);

		}
		return null;
	}

	@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
	@ExceptionHandler(value = Exception.class)
	public String exceptionHandler(Exception e) {
		return "Exception";

	}
}


@RequestMapping(value = "/resetpassword", method = RequestMethod.PUT)
public ErrorMessage resetPassword(@RequestBody User user, HttpSession session) {

	String email = user.getEmail();
	String password = user.getPassword();
	
	System.out.println("Inside reset");
	
	int userId = VerifiedJWT.verify((String) session.getAttribute("Token"));
	if (userId == 0) {
		message.setMessage("Invalid OTP : ");
		message.setStatus(500);
		return message;
	}
	user = userService.emailValidate(email);
	if (user == null) {
		message.setMessage("User not found :");
		message.setStatus(500);
		return message;
	}
	if (userId != user.getId()) {
		message.setMessage("Invalid OTP :");
		message.setStatus(500);
		return message;
	}
	user.setPassword(password);
	if (userService.updateUser(user)) {
		message.setMessage("Reset password is success :");
		message.setStatus(200);
		return message;
	} else {
		message.setMessage("Password could not be changed");
		message.setStatus(-200);
		return message;
	}
}

}

