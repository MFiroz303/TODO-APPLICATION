package com.bridgeit.todo.controller;

import java.io.IOException;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.bridgeit.todo.model.ErrorMessage;
import com.bridgeit.todo.model.User;
import com.bridgeit.todo.service.UserService;
import com.bridgeit.util.FBUtil;
import com.fasterxml.jackson.databind.ObjectMapper;

@RestController
	public class FBLoginController {
	private static  Logger logger = LoggerFactory.getLogger(UserController.class);
		
		@Autowired
		UserService userService;
		
		@Autowired
		ErrorMessage errorMessage;
		
		@RequestMapping(value="/fbLogin")
		public void fbLogin(HttpServletRequest request,HttpServletResponse response) {
			String fbUrl = FBUtil.generateFbUrl();
			try {
				LOG.info("FB URL: " + fbUrl);
				response.sendRedirect(fbUrl);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		@RequestMapping(value="/successFbLogin", method = RequestMethod.GET)
		public ResponseEntity<MyResponse> getFbAccessToken(HttpServletRequest request,HttpServletResponse response,HttpSession session){
			LOG.info("After success");
			String codeForFb = request.getParameter("code");
			LOG.info("codeForFb:-"+codeForFb);
			String accessTokenForFb = FBUtil.getFbAccessToken(codeForFb);
			LOG.info("accessTokenForFb:-"+accessTokenForFb);
			String profileInfoFromFB = FBUtil.getProfileInfoFromFb(accessTokenForFb);
			LOG.info(profileInfoFromFB);
			ObjectMapper mapper = new ObjectMapper();
			try {
				String email = mapper.readTree(profileInfoFromFB).get("email").asText();
				LOG.info(email);
				User userByEmail = userService.getUserByEmail(email);
				LOG.info("userByEmail:-"+userByEmail);
				if(userByEmail==null) {
					User userForFb = new User();
					userForFb.setEmail(mapper.readTree(profileInfoFromFB).get("email").asText());
					userForFb.setFirstName(mapper.readTree(profileInfoFromFB).get("first_name").asText());
					userForFb.setLastName(mapper.readTree(profileInfoFromFB).get("last_name").asText());
					userForFb.setValid(true);
					userService.register(userForFb);
					
					response.sendRedirect("http://localhost:8080/todo/#!/homePage");
				}else {
					String myAccessToken = GenerateJWT.generateToken(userByEmail.getId());
					LOG.info("token geneted by jwt"+myAccessToken);
					session.setAttribute("myAccessToken", myAccessToken);
					response.sendRedirect("http://localhost:8080/todo/#!/dummyFbLogin");
				}
			} catch (IOException e) {
				e.printStackTrace();
			} catch (Exception e) {
				LOG.info("exception occured during registering user from fb:");
				LOG.catching(e);
				e.printStackTrace();
			}
			return null;
			
		}
		@RequestMapping(value="/tokenAftergFbLogin")
		public ResponseEntity<MyResponse> getAccessTokenByglogin(HttpSession session){
			String acessToken = (String) session.getAttribute("myAccessToken");
			myResponse.setResponseMessage(acessToken);
			return ResponseEntity.ok(myResponse);
			
		}

	}

	
}
