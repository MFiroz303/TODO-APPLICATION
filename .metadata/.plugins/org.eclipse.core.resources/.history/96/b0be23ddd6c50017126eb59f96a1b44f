package com.bridgeit.todo.controller;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;

import com.bridgeit.tod.util.GoogleUtil;
import com.bridgeit.todo.Token.TokenGenerate;
import com.bridgeit.todo.model.ErrorMessage;
import com.bridgeit.todo.model.User;
import com.bridgeit.todo.service.UserService;
import com.fasterxml.jackson.databind.ObjectMapper;

public class GoogleLoginController {

	private Logger logger = (Logger) LoggerFactory.getLogger(GoogleLoginController.class);
	
	@Autowired
	 UserService userService;
	
	@Autowired
	ErrorMessage errorMessage;
	
	@RequestMapping(value="/googleLogin")
	public void googleLogin(HttpServletRequest request, HttpServletResponse response) {
		
		String googleUrl=GoogleUtil.generateGoogleUrl();
		logger.info("checking google url"+googleUrl);
		try {
			response.sendRedirect(googleUrl);
		} catch (IOException e) {
			logger.info("exception while generating google url");
			e.printStackTrace();
		}
	}

	@RequestMapping(value="/getGoogleLogin")
	public ResponseEntity<ErrorMessage> getGoogleLogin(HttpServletRequest request, HttpServletResponse response,HttpSession session) {
		
		String code = (String)request.getParameter("code");
		logger.info("code"+code);
		String accessToken = GoogleUtil.getAccessToken(code);
		logger.info("accessToken"+accessToken);
		String googleProfileInfo = GoogleUtil.getProfileData(accessToken);
		logger.info("google profile info"+googleProfileInfo);
		ObjectMapper objectMapper = new ObjectMapper();
		
		try {
			String email = objectMapper.readTree(googleProfileInfo).get("email").asText();
			logger.info("email:-"+email);
			User user = userService.getUserByEmail(email);
			if(user==null) {
				
				User googleUser = new User();
				googleUser.setFirstName(email);
				
				String firstName = objectMapper.readTree(googleProfileInfo).get("first_name").asText();
				googleUser.setFirstName(firstName);
			
				String lastName = objectMapper.readTree(googleProfileInfo).get("last_name").asText();
				googleUser.setFirstName(lastName);
				
				googleUser.setActivated(true);
				int userId = userService.saveUser(user); 
				
				if(userId == 0){
					
				}
					response.sendRedirect("http://localhost:8080/ToDoApp/#!/login");
				} else {
					String accessToken = TokenGenerate.generate(userId);
					session.setAttribute("todoAppAccessToken", accessToken);
				}
		}
				
				
				/*String AccessToken = TokenGenerate.generate(googleUser.getId());
				logger.info("token geneted by jwt"+AccessToken);
				session.setAttribute("myAccessToken",AccessToken);
		
			}
			else {
				String myAccessToken = TokenGenerate.generate(user.getId());
				logger.info("token geneted by jwt"+myAccessToken);
				session.setAttribute("myAccessToken", myAccessToken);

			}
		
			String id = objectMapper.readTree(googleProfileInfo).get("id").asText();
			String verified_email = objectMapper.readTree(googleProfileInfo).get("verified_email").asText(); 
			String given_name = objectMapper.readTree(googleProfileInfo).get("given_name").asText();
			String family_name=objectMapper.readTree(googleProfileInfo).get("family_name").asText();
			String gender = objectMapper.readTree(googleProfileInfo).get("gender").asText();
			
			logger.info(id);
			logger.info(verified_email);
			logger.info(given_name);
			logger.info(family_name);
			logger.info(gender);
			
		} catch (IOException e) {
			logger.info("exception if user do not have account in google");
			e.printStackTrace();
		} catch (Exception e) {
			logger.info("exception at registration time");
			e.printStackTrace();
		}
		
		errorMessage.setResponseMessage(accessToken);
		return ResponseEntity.ok(errorMessage);
	}*/
			
	
}